{"version":3,"sources":["bio.js","serviceWorker.js","index.js"],"names":["Bio","react_default","a","createElement","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","bio_Bio","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGqBA,0LAEb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,uBAIJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,kBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,yDAIJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,OAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,sDACuDH,EAAAC,EAAAC,cAAA,WADvD,mGAEoGF,EAAAC,EAAAC,cAAA,WAFpG,gFAGiFF,EAAAC,EAAAC,cAAA,WAHjF,+EAIgFF,EAAAC,EAAAC,cAAA,WAJhF,gJAKiJF,EAAAC,EAAAC,cAAA,aAGrJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,mBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,WACYH,EAAAC,EAAAC,cAAA,WADZ,kBAEmBF,EAAAC,EAAAC,cAAA,WAFnB,YAGaF,EAAAC,EAAAC,cAAA,WAHb,cAIeF,EAAAC,EAAAC,cAAA,aAGnBF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,WAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAf,aADJ,cAIeH,EAAAC,EAAAC,cAAA,WAJf,UAKWF,EAAAC,EAAAC,cAAA,WALX,eAMgBF,EAAAC,EAAAC,cAAA,WACZF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAf,aARJ,8BAW+BH,EAAAC,EAAAC,cAAA,WAX/B,8DAY+DF,EAAAC,EAAAC,cAAA,WAZ/D,qDAasDF,EAAAC,EAAAC,cAAA,sBA1D7CE,cCSbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.80b0d58a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './styles/bio.css'\n\nexport default class Bio extends Component {\n    render() {\n        return (\n            <div className=\"bio-body-wrapper\">\n                <div className=\"bio-wrapper\">\n                    <div className=\"card\">\n                        <div className=\"card-main-header\">\n                            Nithin Gangadharan\n                        </div>\n                    </div>\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            Current Status\n                        </div>\n                        <div className=\"card-content\">\n                            Senior Sotware Development Engineer, Media.Net, Pune\n                        </div>\n                    </div>\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            Bio\n                        </div>\n                        <div className=\"card-content\">\n                            - Finished schooling from Kendriya Vidyalaya(CBSE).<br />\n                            - Graduated from Pune University with a Bachelor's Degree in Computer Engineering (B.E 2010-14).<br />\n                            - Working as a software-dev since 2014, at multiple companies in Pune, India.<br />\n                            - Love to work on interesting problems and write (or attempt to) clean code.<br />\n                            - Built server-side solutions in PHP/Python/Go(GCE), forayed into the front-end, building websites with react-js and iOS apps in Objective-C.<br />\n                        </div>\n                    </div>\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            Public Profiles\n                        </div>\n                        <div className=\"card-content\">\n                            - Github<br />\n                            - StackOverflow<br />\n                            - Twitter<br />\n                            - LinkedIn <br />\n                        </div>\n                    </div>\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            Hobbies\n                        </div>\n                        <div className=\"card-content\">\n                            <div className=\"card-content-header\">\n                                Fav Bands\n                            </div>\n                            - Metallica<br />\n                            - Opeth<br />\n                            - Pink Floyd<br />\n                            <br />\n                            <div className=\"card-content-header\">\n                                Fav Books\n                            </div>\n                            - Foundation - Isaac Asimov<br />\n                            - Sapiens: A Brief History of Humankind - Yuval Noah Harari<br />\n                            - The Ancient Art of Stoic Joy -  William B Irvine<br />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport Bio from './bio';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Bio />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}